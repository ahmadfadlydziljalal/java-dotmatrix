/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dotmatrix;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import dotmatrix.controllers.Report;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

import simple.escp.Template;
import simple.escp.data.MapDataSource;
import simple.escp.json.JsonTemplate;
import simple.escp.swing.Editor;
import simple.escp.swing.PrintPreviewPane;

/**
 *
 * @author tmsdzil
 */
public class Index extends javax.swing.JFrame {

    public Index() {
        initComponents();
        jSplitPane1.setResizeWeight(1.0);
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonPilihFile = new javax.swing.JButton();
        jTextFieldPathFile = new javax.swing.JTextField();
        jButtonCompileGson = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jInternalFrameResult = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaLogCompile = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemEditorManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonPilihFile.setText("Pilih File");
        jButtonPilihFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPilihFileActionPerformed(evt);
            }
        });

        jButtonCompileGson.setBackground(new java.awt.Color(51, 51, 255));
        jButtonCompileGson.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCompileGson.setText("Compile");
        jButtonCompileGson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompileGsonActionPerformed(evt);
            }
        });

        jLabel1.setText("Compile Result:");

        jInternalFrameResult.setPreferredSize(new java.awt.Dimension(222, 233));
        jInternalFrameResult.setVisible(true);

        javax.swing.GroupLayout jInternalFrameResultLayout = new javax.swing.GroupLayout(jInternalFrameResult.getContentPane());
        jInternalFrameResult.getContentPane().setLayout(jInternalFrameResultLayout);
        jInternalFrameResultLayout.setHorizontalGroup(
            jInternalFrameResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrameResultLayout.setVerticalGroup(
            jInternalFrameResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jInternalFrameResult);

        jTextAreaLogCompile.setEditable(false);
        jTextAreaLogCompile.setColumns(20);
        jTextAreaLogCompile.setRows(5);
        jScrollPane1.setViewportView(jTextAreaLogCompile);

        jSplitPane1.setRightComponent(jScrollPane1);

        jProgressBar1.setStringPainted(true);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItemEditorManual.setText("Editor Manual");
        jMenuItemEditorManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditorManualActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemEditorManual);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jButtonPilihFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCompileGson)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPathFile)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                        .addGap(6, 6, 6))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPilihFile)
                    .addComponent(jTextFieldPathFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCompileGson))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(570, 504));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPilihFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPilihFileActionPerformed

        JFileChooser jfc = new JFileChooser();
        jfc.setCurrentDirectory(new File(
                System.getProperty("user.home") + System.getProperty("file.separator") + "Downloads"
        ));

        Action details = jfc.getActionMap().get("viewTypeDetails");
        details.actionPerformed(null);

        FileNameExtensionFilter filter = new FileNameExtensionFilter("JSON", "json");
        jfc.setFileFilter(filter);

        int result = jfc.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            jTextFieldPathFile.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButtonPilihFileActionPerformed

    private void jButtonCompileGsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompileGsonActionPerformed

        if (jTextFieldPathFile.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pilih File dulu");
            return;
        }

        Runnable runner = () -> {
            jProgressBar1.setValue(0);
            jButtonCompileGson.setText("Compiling....");
            
            Report report = new Report(jTextFieldPathFile.getText()); // Create a report, param => file`s path
            HashMap<String, String> result = report.convertJsonToObject();// Read the file, as the return is a hashMap
            
            jProgressBar1.setValue(5); // Adding Log
            jTextAreaLogCompile.append("Memilih File " + jTextFieldPathFile.getText() + " \n"); // 
            
            if (!result.isEmpty()) {
                
                jProgressBar1.setValue(6);
                jTextAreaLogCompile.append("Mengambil template report dari resource \n");
                Gson gsonTemplate = new Gson();
                String jsonStringTemplate = gsonTemplate.toJson(result.get("documentTemplate"));
                
                jProgressBar1.setValue(7);
                jTextAreaLogCompile.append("Membentuk template. \n");
                Template template = new JsonTemplate(jsonStringTemplate);
                
                jProgressBar1.setValue(8);
                jTextAreaLogCompile.append("Melakukan deep clone untuk membentuk isi report... \n");
                Gson gson = new Gson();
                String jsonString = new Gson().toJson(result.get("documentValue"));
                java.lang.reflect.Type type1 = new TypeToken<HashMap<String, Object>>() {
                }.getType();
                Map<String, Object> map = gson.fromJson(jsonString, type1);
                
                jProgressBar1.setValue(80);
                jTextAreaLogCompile.append("Membuat Data Source... \n");
                MapDataSource dataSource = new MapDataSource(map);
                PrintPreviewPane printPreviewPane = new PrintPreviewPane(); // Error: Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
                printPreviewPane.display(template, dataSource);
                
                jProgressBar1.setValue(90);
                jTextAreaLogCompile.append("Menampilkan Preview... \n");
                jInternalFrameResult.getContentPane().removeAll();
                jInternalFrameResult.repaint();
                jInternalFrameResult.setLayout(new BorderLayout());
                jInternalFrameResult.add(printPreviewPane, BorderLayout.CENTER);
                jInternalFrameResult.setAutoscrolls(true);
                jInternalFrameResult.setFocusable(true);
                
                jProgressBar1.setValue(100);
                jTextAreaLogCompile.append(jTextFieldPathFile.getText() + ": sukses di compile; Dzil" + " \n=================\n");
            }
            jButtonCompileGson.setText("Compile");
        };

        Thread t = new Thread(runner, "Code Executer");
        t.start();


    }//GEN-LAST:event_jButtonCompileGsonActionPerformed

    private void jMenuItemEditorManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditorManualActionPerformed
        Editor editor = new Editor();
        editor.setPreferredSize(new Dimension(600, 600));
        editor.pack();
        editor.setLocationRelativeTo(null);
        editor.setVisible(true);
    }//GEN-LAST:event_jMenuItemEditorManualActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        try {
            // Set System L&F
            // UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
            // UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            // UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {

        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCompileGson;
    private javax.swing.JButton jButtonPilihFile;
    private javax.swing.JInternalFrame jInternalFrameResult;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemEditorManual;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    public javax.swing.JTextArea jTextAreaLogCompile;
    private javax.swing.JTextField jTextFieldPathFile;
    // End of variables declaration//GEN-END:variables
}
